USER-SUPPLIED VALUES:
compactor:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 50m
      memory: 64Mi
distributor:
  autoscaling:
    enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 3Gi
    requests:
      cpu: 50m
      memory: 64Mi
gateway:
  ingress:
    enabled: true
    hosts:
    - host: gateway-loki.com.br
      paths:
      - path: /
        pathType: Prefix
    ingressClassName: nginx
indexGateway:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 50m
      memory: 64Mi
ingester:
  autoscaling:
    enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 3Gi
    requests:
      cpu: 50m
      memory: 64Mi
loki:
  structuredConfig:
    auth_enabled: false
    chunk_store_config:
      chunk_cache_config:
        memcached:
          batch_size: 100
          parallelism: 100
        memcached_client:
          consistent_hash: true
    common:
      path_prefix: /var/loki
      replication_factor: 3
      ring:
        kvstore:
          store: memberlist
      storage:
        s3:
          access_key_id: FDSAFADSFADSF
          bucketnames: loki-eks-revendamais-hml
          region: ua-east-1
          secret_access_key: FSDFASDFASDF
    compactor:
      retention_delete_delay: 2h
      retention_delete_worker_count: 150
      retention_enabled: true
      shared_store: s3
    frontend:
      compress_responses: true
      log_queries_longer_than: 5s
      max_outstanding_per_tenant: 4096
    frontend_worker:
      grpc_client_config:
        max_send_msg_size: 104857600
      parallelism: 6
    ingester:
      autoforget_unhealthy: true
      chunk_encoding: snappy
      chunk_idle_period: 2h
      chunk_target_size: 1572864
      lifecycler:
        ring:
          kvstore:
            store: memberlist
      max_chunk_age: 2h
      max_transfer_retries: 0
    ingester_client:
      grpc_client_config:
        max_recv_msg_size: 104857600
    limits_config:
      cardinality_limit: 500000
      enforce_metric_name: false
      ingestion_burst_size_mb: 1000
      ingestion_rate_mb: 10000
      max_cache_freshness_per_query: 10m
      max_global_streams_per_user: 100000
      max_query_lookback: 2160h
      max_query_parallelism: 32
      max_streams_per_user: 100000
      per_stream_rate_limit: 512M
      per_stream_rate_limit_burst: 1024M
      query_timeout: 300s
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      retention_period: 2160h
      split_queries_by_interval: 15m
      tsdb_max_query_parallelism: 512
    querier:
      max_concurrent: 16
    query_range:
      align_queries_with_step: true
      cache_results: true
      max_retries: 5
      parallelise_shardable_queries: true
      results_cache:
        cache:
          enable_fifocache: true
          fifocache:
            max_size_items: 1024
            validity: 24h
    query_scheduler:
      max_outstanding_requests_per_tenant: 32768
    ruler:
      alertmanager_url: http://alertmanager-operated.cattle-monitoring-system.svc.cluster.local:9093
      enable_api: true
      ring:
        kvstore:
          store: inmemory
      storage:
        s3:
          s3: s3://sa-east-1/bucket-name
        type: s3
    schema_config:
      configs:
      - from: "2024-01-10"
        index:
          period: 24h
          prefix: loki_index_
        object_store: s3
        schema: v12
        store: tsdb
    server:
      grpc_listen_port: 9095
      grpc_server_max_recv_msg_size: 104857600
      grpc_server_max_send_msg_size: 104857600
      http_listen_port: 3100
      http_server_read_timeout: 10m
      http_server_write_timeout: 10m
    storage_config:
      aws:
        access_key_id: fsdafsd
        bucketnames: bucket-name
        s3: s3://sa-east-1
        secret_access_key: fsdafas
      boltdb_shipper:
        shared_store: s3
      tsdb_shipper:
        active_index_directory: /var/loki
        cache_location: /var/loki/tsdb-cache
        # index_gateway_client:
        #   server_address: loki-loki-distributed-gateway.loki-distributed-dev.svc.cluster.local
        shared_store: s3
memcached:
  livenessProbe:
    initialDelaySeconds: 10
    tcpSocket:
      port: http
  readinessProbe:
    initialDelaySeconds: 5
    tcpSocket:
      port: http
    timeoutSeconds: 1
memcachedChunks:
  enabled: true
  extraArgs:
  - -m 2048
  - -I 2m
  - -v
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 50m
      memory: 64Mi
memcachedExporter:
  enabled: true
memcachedFrontend:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 50m
      memory: 64Mi
memcachedIndexQueries:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 50m
      memory: 64Mi
memcachedIndexWrite:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 50m
      memory: 64Mi
prometheusRule:
  annotations:
    description: '{{ $labels.message }}'
  enabled: true
  groups:
  - name: loki_rules
    rules:
    - expr: histogram_quantile(0.99, sum(rate(loki_request_duration_seconds_bucket[1m]))
        by (le, cluster, job))
      record: cluster_job:loki_request_duration_seconds:99quantile
    - expr: histogram_quantile(0.50, sum(rate(loki_request_duration_seconds_bucket[1m]))
        by (le, cluster, job))
      record: cluster_job:loki_request_duration_seconds:50quantile
    - expr: sum(rate(loki_request_duration_seconds_sum[1m])) by (cluster, job) / sum(rate(loki_request_duration_seconds_count[1m]))
        by (cluster, job)
      record: cluster_job:loki_request_duration_seconds:avg
    - expr: sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, cluster, job)
      record: cluster_job:loki_request_duration_seconds_bucket:sum_rate
    - expr: sum(rate(loki_request_duration_seconds_sum[1m])) by (cluster, job)
      record: cluster_job:loki_request_duration_seconds_sum:sum_rate
    - expr: sum(rate(loki_request_duration_seconds_count[1m])) by (cluster, job)
      record: cluster_job:loki_request_duration_seconds_count:sum_rate
    - expr: histogram_quantile(0.99, sum(rate(loki_request_duration_seconds_bucket[1m]))
        by (le, cluster, job, route))
      record: cluster_job_route:loki_request_duration_seconds:99quantile
    - expr: histogram_quantile(0.50, sum(rate(loki_request_duration_seconds_bucket[1m]))
        by (le, cluster, job, route))
      record: cluster_job_route:loki_request_duration_seconds:50quantile
    - expr: sum(rate(loki_request_duration_seconds_sum[1m])) by (cluster, job, route)
        / sum(rate(loki_request_duration_seconds_count[1m])) by (cluster, job, route)
      record: cluster_job_route:loki_request_duration_seconds:avg
    - expr: sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, cluster, job,
        route)
      record: cluster_job_route:loki_request_duration_seconds_bucket:sum_rate
    - expr: sum(rate(loki_request_duration_seconds_sum[1m])) by (cluster, job, route)
      record: cluster_job_route:loki_request_duration_seconds_sum:sum_rate
    - expr: sum(rate(loki_request_duration_seconds_count[1m])) by (cluster, job, route)
      record: cluster_job_route:loki_request_duration_seconds_count:sum_rate
    - expr: histogram_quantile(0.99, sum(rate(loki_request_duration_seconds_bucket[1m]))
        by (le, cluster, namespace, job, route))
      record: cluster_namespace_job_route:loki_request_duration_seconds:99quantile
    - expr: histogram_quantile(0.50, sum(rate(loki_request_duration_seconds_bucket[1m]))
        by (le, cluster, namespace, job, route))
      record: cluster_namespace_job_route:loki_request_duration_seconds:50quantile
    - expr: sum(rate(loki_request_duration_seconds_sum[1m])) by (cluster, namespace,
        job, route) / sum(rate(loki_request_duration_seconds_count[1m])) by (cluster,
        namespace, job, route)
      record: cluster_namespace_job_route:loki_request_duration_seconds:avg
    - expr: sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, cluster, namespace,
        job, route)
      record: cluster_namespace_job_route:loki_request_duration_seconds_bucket:sum_rate
    - expr: sum(rate(loki_request_duration_seconds_sum[1m])) by (cluster, namespace,
        job, route)
      record: cluster_namespace_job_route:loki_request_duration_seconds_sum:sum_rate
    - expr: sum(rate(loki_request_duration_seconds_count[1m])) by (cluster, namespace,
        job, route)
      record: cluster_namespace_job_route:loki_request_duration_seconds_count:sum_rate
  labels:
    app: loki-distributed
    release: kube-prometheus-stack
querier:
  autoscaling:
    enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 50m
      memory: 64Mi
queryFrontend:
  autoscaling:
    enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 50m
      memory: 64Mi
queryScheduler:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 50m
      memory: 64Mi
ruler:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 50m
      memory: 64Mi
serviceMonitor:
  enabled: true
  labels:
    app: loki-distributed
    release: kube-prometheus-stack